name: CI/CD Pipeline for Go Application Deployment

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the main branch

jobs:
  deploy-to-ec2:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Archive and compress the source code
      - name: Archive project
        run: tar -czf app.tar.gz .

      # Step 3: Copy files to EC2 using a stable version of scp-action
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "app.tar.gz"
          target: "~/app.tar.gz"

      # Step 4: SSH into EC2 to deploy the application
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Update and install Docker if not present
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            # Extract the app archive
            cd ~
            rm -rf app && mkdir app
            tar -xzf app.tar.gz -C app
            cd app
            # Stop and remove the old container if it exists
            docker stop myapp || true
            docker rm myapp || true
            # Build and run the new Docker container
            docker build -t myapp:latest .
            docker run -d --name myapp -p 8080:8080 myapp:latest
