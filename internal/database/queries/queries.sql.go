// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (groupname)
VALUES ($1)
RETURNING id, groupname
`

type CreateGroupRow struct {
	ID        int32
	Groupname string
}

func (q *Queries) CreateGroup(ctx context.Context, groupname string) (CreateGroupRow, error) {
	row := q.db.QueryRowContext(ctx, createGroup, groupname)
	var i CreateGroupRow
	err := row.Scan(&i.ID, &i.Groupname)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (title)
VALUES ($1)
RETURNING id, title, created_at, updated_at
`

func (q *Queries) CreatePermission(ctx context.Context, title string) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission, title)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, hashed_password)
VALUES ($1, $2, $3)
RETURNING id, username, email, created_at, updated_at
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID        int32
	Username  string
	Email     string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, groupname
FROM groups
WHERE id = $1
`

type GetGroupByIDRow struct {
	ID        int32
	Groupname string
}

func (q *Queries) GetGroupByID(ctx context.Context, id int32) (GetGroupByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i GetGroupByIDRow
	err := row.Scan(&i.ID, &i.Groupname)
	return i, err
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT id, title
FROM permissions
WHERE id = $1
`

type GetPermissionByIDRow struct {
	ID    int32
	Title string
}

func (q *Queries) GetPermissionByID(ctx context.Context, id int32) (GetPermissionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByID, id)
	var i GetPermissionByIDRow
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, hashed_password, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
